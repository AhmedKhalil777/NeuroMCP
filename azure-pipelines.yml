trigger:
  branches:
    include:
    - main
  tags:
    include:
    - v*

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

stages:
- stage: Build
  displayName: 'Build Packages'
  jobs:
  - job: BuildPackages
    displayName: 'Build and Pack'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK 8.0.x'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        
    - task: DotNetCoreCLI@2
      displayName: 'Restore dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'
    
    # Extract version from tag if present, otherwise use a development version
    - bash: |
        if [[ $BUILD_SOURCEBRANCH == refs/tags/v* ]]; then
          VERSION=${BUILD_SOURCEBRANCH:11}  # Remove refs/tags/v prefix
        else
          # Development version based on date and commit count
          COMMIT_COUNT=$(git rev-list --count HEAD)
          DATE=$(date '+%Y%m%d')
          VERSION="1.0.0-dev.$DATE.$COMMIT_COUNT"
        fi
        echo "##vso[task.setvariable variable=VERSION]$VERSION"
        echo "Using version: $VERSION"
      displayName: 'Determine version'
    
    # Build SQL Server package
    - task: DotNetCoreCLI@2
      displayName: 'Build SQL Server package'
      inputs:
        command: 'build'
        projects: 'NeuroMCP.SqlServer/NeuroMCP.SqlServer.csproj'
        arguments: '-c $(buildConfiguration) -p:Version=$(VERSION)'
    
    # Pack SQL Server package
    - task: DotNetCoreCLI@2
      displayName: 'Pack SQL Server package'
      inputs:
        command: 'pack'
        packagesToPack: 'NeuroMCP.SqlServer/NeuroMCP.SqlServer.csproj'
        nobuild: true
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'VERSION'
        configuration: '$(buildConfiguration)'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
    
    # Build Azure DevOps package
    - task: DotNetCoreCLI@2
      displayName: 'Build Azure DevOps package'
      inputs:
        command: 'build'
        projects: 'NeuroMCP.AzureDevOps/NeuroMCP.AzureDevOps.csproj'
        arguments: '-c $(buildConfiguration) -p:Version=$(VERSION)'
    
    # Pack Azure DevOps package
    - task: DotNetCoreCLI@2
      displayName: 'Pack Azure DevOps package'
      inputs:
        command: 'pack'
        packagesToPack: 'NeuroMCP.AzureDevOps/NeuroMCP.AzureDevOps.csproj'
        nobuild: true
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'VERSION'
        configuration: '$(buildConfiguration)'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
    
    # Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/packages'
        ArtifactName: 'packages'
        publishLocation: 'Container'

- stage: Publish
  displayName: 'Publish to NuGet'
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
  jobs:
  - job: PublishPackages
    displayName: 'Push to NuGet'
    steps:
    - checkout: none
    
    - download: current
      artifact: packages
      displayName: 'Download Build Artifacts'
    
    - task: NuGetCommand@2
      displayName: 'Push packages to NuGet.org'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/packages/**/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'NuGet.org'  # This refers to a service connection named 'NuGet.org' that should be set up in Azure DevOps
    
    # Create a release if this is a tag build
    - task: GitHubRelease@1
      displayName: 'Create GitHub Release'
      inputs:
        gitHubConnection: 'GitHub'  # This refers to a service connection named 'GitHub' that should be set up in Azure DevOps
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        tagPattern: 'v.*'
        releaseNotesSource: 'inline'
        releaseNotesInline: |
          # NeuroMCP v$(VERSION)
          
          This release includes:
          
          - NeuroMCP.SqlServer v$(VERSION)
          - NeuroMCP.AzureDevOps v$(VERSION)
          
          ## Installation
          
          ```bash
          # SQL Server package
          dotnet tool install --global NeuroMCP.SqlServer --version $(VERSION)
          
          # Azure DevOps package
          dotnet tool install --global NeuroMCP.AzureDevOps --version $(VERSION)
          ```
        assets: '$(Pipeline.Workspace)/packages/**/*.nupkg'
        isPreRelease: false
        addChangeLog: true 